# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.


class ActiveSupport::TestCase
  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Block]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Block) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Block]) }
  def blocks(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ContractCode]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ContractCode) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ContractCode])
  end
  def contract_codes(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[ContractState]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(ContractState) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[ContractState])
  end
  def contract_states(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Transaction]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Transaction) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Transaction])
  end
  def transactions(fixture_name = nil, *other_fixtures); end
end
